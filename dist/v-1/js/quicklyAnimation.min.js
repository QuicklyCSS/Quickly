/* /////////////////////////////////////////////////// */
/* © 2024 Quickly CSS GRID Versión Oficial 1.1.0       */
/* JS minimizado                                       */
/* Por Alex Osses                                      */
/* Documentación https://quicklycss.github.io/Quickly/ */
/* /////////////////////////////////////////////////// */
/*
document.addEventListener("DOMContentLoaded", function () {
  const elements = document.querySelectorAll("[data-Qy-r]");
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("active");
        }
      });
    },
    { threshold: 0.1 }
  );
  elements.forEach((element) => {
    observer.observe(element);
  });
});
document.addEventListener("DOMContentLoaded", function () {
  const elements = document.querySelectorAll("[data-Qy-rb]");
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("active");
        } else {
          entry.target.classList.remove("active");
        }
      });
    },
    { threshold: 0.1 }
  );
  elements.forEach((element) => {
    observer.observe(element);
  });
});
*/

document.addEventListener("DOMContentLoaded", function () {
    const elementsRun = document.querySelectorAll("[data-Qy-r]");
    const elementsRunBack = document.querySelectorAll("[data-Qy-rb]");
    
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          // Log para ver qué elemento está siendo evaluado
          console.log("Elemento observado:", entry.target);

          // Usar requestAnimationFrame para asegurar que el ciclo de renderizado se sincroniza
          window.requestAnimationFrame(() => {
            if (entry.isIntersecting) {
              console.log("Elemento intersectado:", entry.target);
              if (!entry.target.classList.contains("active")) {
                console.log("Añadiendo clase 'active' a:", entry.target);
                entry.target.classList.add("active");
              }
            } else if (entry.target.hasAttribute("data-Qy-rb")) {
              console.log("Elemento fuera del viewport:", entry.target);
              if (entry.target.classList.contains("active")) {
                console.log("Removiendo clase 'active' de:", entry.target);
                entry.target.classList.remove("active");
              }
            }
          });
        });
      },
      { 
        threshold: 0.1, 
        rootMargin: "100px 0px" // Activar animaciones un poco antes de entrar al viewport
      }
    );
  
    // Unir ambos conjuntos de elementos y observarlos
    const allElements = [...elementsRun, ...elementsRunBack];
    console.log("Total de elementos observados:", allElements.length);
    
    allElements.forEach((element) => {
      observer.observe(element);
      console.log("Observando elemento:", element);
    });
});


  
  
  
